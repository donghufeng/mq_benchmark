import sys

import benchmark_pennylane
import benchmark_mindquantum
import benchmark_paddle
import benchmark_qiskit
import benchmark_qpanda
import benchmark_tfq

import networkx as nx
import time


def generate_graphs(n_nodes):
    """Generate a list containing random graphs generated by Networkx."""
    edges = []

    if n_nodes == 4:
        edges = [(0, 1), (0, 3), (1, 2), (2, 3)]
    elif n_nodes == 5:
        edges = [(0, 1), (1, 2), (2, 3), (3, 4), (0, 4), (0, 2)]
    elif n_nodes == 6:
        edges = [(0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (3, 5)]
    elif n_nodes == 7:
        edges = [(0, 4), (0, 5), (0, 6), (1, 4), (1, 5), (2, 5), (2, 6), (3, 5), (3, 6)]

    return nx.Graph(edges)


if __name__ == '__main__':
    args = sys.argv
    print(args)
    if len(args) < 4:
        Exception("Please enter the parameters n_nodes,n_layers,shots,iter_num in sequence")

    n_nodes = int(args[1])
    n_layers = int(args[2])
    shots = int(args[3])
    iter_num = int(args[4])

    graph = generate_graphs(n_nodes)

    # hp = {'graph': graph,
    #       'n_layers': 4,
    #       'shots': 1000,
    #       'iter_num': 100}

    hp = {'graph': graph,
          'n_layers': n_layers,
          'shots': shots,
          'iter_num': iter_num}

    mq_start = time.time()
    benchmark_mindquantum.bench(hp)
    mq_execution = time.time() - mq_start

    pd_start = time.time()
    benchmark_paddle.bench(hp)
    pd_execution = time.time() - pd_start

    qp_start = time.time()
    benchmark_qpanda.bench(hp)
    qp_execution = time.time() - qp_start

    pl_start = time.time()
    benchmark_pennylane.bench(hp)
    pl_execution = time.time() - pl_start

    qiskit_start = time.time()
    benchmark_qiskit.bench(hp)
    qiskit_execution = time.time() - qiskit_start

    # tfq_start = time.time()
    # benchmark_tfq.bench(hp)
    # tfq_execution = time.time() - tfq_start

    print("Execution time with MindQuantum:", mq_execution)
    print("Execution time with PaddleQuantum:", pd_execution)
    print("Execution time with QPanda:", qp_execution)
    print("Execution time with PennyLane:", pl_execution)
    print("Execution time with Qiskit:", qiskit_execution)
    # print("Execution time with Tensorflow Quantum:", tfq_execution)
